<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>汇编 on Skywind Inside</title>
    <link>https://skywind3000.com/tags/%E6%B1%87%E7%BC%96/</link>
    <description>Recent content in 汇编 on Skywind Inside</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 17 Jun 2016 10:20:18 +0000</lastBuildDate>
    
	<atom:link href="https://skywind3000.com/tags/%E6%B1%87%E7%BC%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>计算机底层是如何访问显卡的？</title>
      <link>https://skywind3000.com/blog/archives/1774/</link>
      <pubDate>Fri, 17 Jun 2016 10:20:18 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/1774/</guid>
      <description>&lt;p&gt;以前 DOS下做游戏，操作系统除了磁盘和文件管理外基本不管事情，所有游戏都是直接操作显卡和声卡的，用不了什么驱动。&lt;/p&gt;

&lt;p&gt;虽然没有驱动，但是硬件标准还是放在那里，VGA, SVGA, VESA, VESA2.0 之类的硬件标准，最起码，你只做320x200x256c的游戏，或者 ModeX 下 320x240x256c 的游戏的话，需要用到VGA和部分 SVGA标准，而要做真彩高彩，更高分辨率的游戏的话，就必须掌握 VESA的各项规范了。&lt;/p&gt;

&lt;p&gt;翻几段以前写的代码演示下：&lt;/p&gt;

&lt;h3 id=&#34;例子1-初始化-vga-vesa-显示模式&#34;&gt;例子1： 初始化 VGA/VESA 显示模式&lt;/h3&gt;

&lt;p&gt;基本是参考 VGA的编程手册来做：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INT 10,0 - Set Video Mode
    AH = 00
    AL = 00  40x25 B/W text (CGA,EGA,MCGA,VGA)
       = 01  40x25 16 color text (CGA,EGA,MCGA,VGA)
       = 02  80x25 16 shades of gray text (CGA,EGA,MCGA,VGA)
       = 03  80x25 16 color text (CGA,EGA,MCGA,VGA)
       = 04  320x200 4 color graphics (CGA,EGA,MCGA,VGA)
       = 05  320x200 4 color graphics (CGA,EGA,MCGA,VGA)
       = 06  640x200 B/W graphics (CGA,EGA,MCGA,VGA)
       = 07  80x25 Monochrome text (MDA,HERC,EGA,VGA)
       = 08  160x200 16 color graphics (PCjr)
       = 09  320x200 16 color graphics (PCjr)
       = 0A  640x200 4 color graphics (PCjr)
       = 0B  Reserved (EGA BIOS function 11)
       = 0C  Reserved (EGA BIOS function 11)
       = 0D  320x200 16 color graphics (EGA,VGA)
       = 0E  640x200 16 color graphics (EGA,VGA)
       = 0F  640x350 Monochrome graphics (EGA,VGA)
       = 10  640x350 16 color graphics (EGA or VGA with 128K)
         640x350 4 color graphics (64K EGA)
       = 11  640x480 B/W graphics (MCGA,VGA)
       = 12  640x480 16 color graphics (VGA)
       = 13  320x200 256 color graphics (MCGA,VGA)
       = 8x  EGA, MCGA or VGA ignore bit 7, see below
       = 9x  EGA, MCGA or VGA ignore bit 7, see below
    - if AL bit 7=1, prevents EGA,MCGA &amp;amp; VGA from clearing display
    - function updates byte at 40:49;  bit 7 of byte 40:87
      (EGA/VGA Display Data Area) is set to the value of AL bit 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转换成代码的话，类似这样：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>超越 SDL/DirectDraw/GDI 性能的位图库</title>
      <link>https://skywind3000.com/blog/archives/1683/</link>
      <pubDate>Thu, 28 Apr 2016 16:00:37 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/1683/</guid>
      <description>&lt;p&gt;开源一个高性能位图库，之前对我的二维图形库 &lt;a href=&#34;https://github.com/skywind3000/pixellib&#34;&gt;pixellib&lt;/a&gt; 进行了精简和重写，最终形成一个只包含两个文件（BasicBitmap.h, BasicBitmap.cpp）的图形基础库。 在今天 GPU 绘制横行天下的时候，任然有很多时候需要使用到纯
CPU实现的图形库，比如图像处理，视频预处理与合成，界面，以及GPU无法使用的情况（比如某个应用把gpu占满了，或者无法通过gpu做一些十分灵活的事情时），纹理处理，简单图片加载保存等。 支持 SSE2/AVX 优化，比 DirectDraw 快 40%（全系统内存绘制），比 SDL 快 10%，比GDI快 38%。如果你需要一个方便的高性能位图库，足够高性能的同时保证足够紧凑。
如果你有上述需求，那么你和我一样需要用到 BasicBitmap，只需要把 BasicBitmap.h/.cpp 两个文件拷贝到你的代码中即可。我正是为了这个目的编写了这两个文件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存拷贝优化（3）-深入优化</title>
      <link>https://skywind3000.com/blog/archives/1587/</link>
      <pubDate>Sun, 20 Dec 2015 10:15:10 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/1587/</guid>
      <description>&lt;p&gt;今天继续在原来内存拷贝代码上优化：&lt;/p&gt;

&lt;p&gt;1. 修改了小内存方案：由原来64字节扩大为128字节，由 int 改为 xmm，小内存性能提升 80%&lt;br /&gt;
2. 修改了中内存方案：从4个xmm寄存器并行拷贝改为8个并行拷贝+prefetch，提升20%左右&lt;br /&gt;
3. 去除目标地址头部对齐的分支判断，用一次xmm拷贝完成目标对齐，性能替升10%。&lt;br /&gt;
4. 增加测试用例：为贴近实际，增加了随机访问，10MB空间内（绝对大于L2尺寸）随机位置和长度的测试&lt;/p&gt;

&lt;p&gt;为避免随机数生成影响结果，提前生成随机数，最终平均性能达到gcc4.9配套标准库的2倍以上：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/skywind3000/FastMemcpy&#34;&gt;https://github.com/skywind3000/FastMemcpy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最新代码测试结果（可以对比老的表看新版本性能是否有所提升）：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存拷贝优化（2）-全尺寸拷贝优化</title>
      <link>https://skywind3000.com/blog/archives/1573/</link>
      <pubDate>Fri, 18 Dec 2015 06:15:17 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/1573/</guid>
      <description>&lt;p&gt;四年前写过一篇小内存拷贝优化：&lt;a href=&#34;http://www.skywind.me/blog/archives/143&#34;&gt;http://www.skywind.me/blog/archives/143&lt;/a&gt; 纠结了一下还是把全尺寸拷贝优化代码发布出来吧，没啥好保密的， 如今总结一下全尺寸内存拷贝优化的要点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;策略区别：64字节以内用小内存方案，64K以内用中尺寸方案，大于64K用大内存拷贝方案。&lt;/li&gt;
&lt;li&gt;查表跳转：拷贝不同小尺寸内存，直接跳转到相应地址解除循环。&lt;/li&gt;
&lt;li&gt;目标对齐：64字节以上拷贝的先用普通方法拷贝几个字节让目标地址对齐，好做后面的事情。&lt;/li&gt;
&lt;li&gt;矢量拷贝：并行一次性读入N个矢量到 sse2 寄存器，再并行写出。&lt;/li&gt;
&lt;li&gt;缓存预取：使用 prefetchnta ，提前预取数据，等到真的要用时数据已经到位。&lt;/li&gt;
&lt;li&gt;内存直写：使用 movntdq 来直写内存，避免缓存污染。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>转换 Intel汇编格式到 AT&amp;T 汇编风格</title>
      <link>https://skywind3000.com/blog/archives/1244/</link>
      <pubDate>Fri, 10 Apr 2015 11:33:09 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/1244/</guid>
      <description>&lt;p&gt;常用 MSVC写内嵌汇编需要兼容 GCC是一件头疼的事情，不是说你不会写 GCC的 AT&amp;amp;T风格汇编，而是说同一份代码写两遍，还要调试两遍，是一件头疼的事情，特别是汇编写了上百行的时候。于是五年前写过一个小工具，可以方便的进行转换，能把 MSVC/MASM的汇编转成纯 AT&amp;amp;T风格汇编，或者 GCC
Inline风格汇编，自动识别寄存器和变量，还有跳转地址，并且自动导出。今天把他放上来，或许有用到的人吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skywind3000/Intel2GAS/master/images/intel2gas_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;项目下载：&lt;a href=&#34;https://github.com/skywind3000/Intel2GAS&#34;&gt;https://github.com/skywind3000/Intel2GAS&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[自制开源] 轻量级图形库 PixelLib</title>
      <link>https://skywind3000.com/blog/archives/137/</link>
      <pubDate>Sat, 09 Jan 2010 19:24:07 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/137/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;图像：64种不同的像素格式，色彩空间变换，多种图形图像变换。&lt;/li&gt;
&lt;li&gt;质量：支持3种级别抗锯齿效果，高质量几何图形绘制。&lt;/li&gt;
&lt;li&gt;实现：轻量级纯软件实现，100% C代码（仅700KB代码）。&lt;/li&gt;
&lt;li&gt;优化：SSE2/MMX优化 地址：&lt;a href=&#34;https://github.com/skywind3000/pixellib&#34;&gt;https://github.com/skywind3000/pixellib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1. 图像变换：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.skywind.me/mw/images/8/8e/Pixellib_image_transform.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;支持仿射变换和透视变换，提供大量图像变换操作接口。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 抗锯齿：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.skywind.me/mw/images/9/9c/Pixellib_anti_aliasing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所有图形绘制支持3级不同程度的抗锯齿效果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 图像绘制：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.skywind.me/mw/images/4/41/Pixellib_image_drawing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;图像任意拉伸，旋转，3D旋转，并且同时进行色彩空间变换。全部采用浮点数坐标，图像移动更为平滑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 几何作图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.skywind.me/mw/images/1/1e/Pixellib_geometry.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;全面的抗锯齿几何作图效果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 图像扭曲：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.skywind.me/mw/images/c/c9/Pixellib_image_warp.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在源图像上布置若干关键点，然后改变这些关键点在屏幕上的对于位置即可实现图像扭曲。&lt;/p&gt;

&lt;p&gt;**使用 Pixellib 来渲染 iOS 风格的图标 **&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.skywind.me/mw/images/e/e7/Pixellib_quality.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[业余土制] 实时汇编编译器</title>
      <link>https://skywind3000.com/blog/archives/154/</link>
      <pubDate>Sun, 05 Jul 2009 13:32:10 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/154/</guid>
      <description>&lt;p&gt;实时动态在内存中编译汇编代码，并返回函数调用指针，可用于JIT系统的后端：&lt;/p&gt;

&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/skywind3000/asmpure&#34;&gt;https://github.com/skywind3000/asmpure&lt;/a&gt; 例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;const char *AlphaBlendAsm =
&amp;quot;PROC C1:DWORD, C2:DWORD, A:DWORD\n&amp;quot;
&amp;quot;    movd mm0, A\n&amp;quot;
&amp;quot;    punpcklwd mm0, mm0\n&amp;quot;
&amp;quot;    punpckldq mm0, mm0\n&amp;quot;
&amp;quot;    pcmpeqb mm7, mm7\n&amp;quot;
&amp;quot;    psubw mm7, mm0\n&amp;quot;
&amp;quot;    \n&amp;quot;
&amp;quot;    punpcklbw mm1, C1\n&amp;quot;
&amp;quot;    psrlw mm1, 8\n&amp;quot;
&amp;quot;    punpcklbw mm2, C2\n&amp;quot;
&amp;quot;    psrlw mm2, 8\n&amp;quot;
&amp;quot;    \n&amp;quot;
&amp;quot;    pmullw mm1, mm7\n&amp;quot;
&amp;quot;    pmullw mm2, mm0\n&amp;quot;
&amp;quot;    paddw mm1, mm2\n&amp;quot;
&amp;quot;    \n&amp;quot;
&amp;quot;    psrlw mm1, 8\n&amp;quot;
&amp;quot;    packuswb mm1, mm1\n&amp;quot;
&amp;quot;    movd eax, mm1\n&amp;quot;
&amp;quot;    emms\n&amp;quot;
&amp;quot;    ret\n&amp;quot;
&amp;quot;ENDP\n&amp;quot;;

void testAlphaBlend(void)
{
		CAssembler *casm;
		int c;
		int (*AlphaBlendPtr)(int, int, int);
		// create assembler
		casm = casm_create();
		// append assembly source
		casm_source(casm, AlphaBlendAsm);
		AlphaBlendPtr = (int (*)(int, int, int))casm_callable(casm, NULL);
		if (AlphaBlendPtr == NULL) {
				printf(&amp;quot;error: %s\n&amp;quot;, casm-&amp;gt;error);
				casm_release(casm);
				return;
		}
		printf(&amp;quot;==================== Alpha Blend ====================\n&amp;quot;);
		casm_dumpinst(casm, stdout);
		printf(&amp;quot;\nExecute code (y/n)?\n\n&amp;quot;);
		do
		{
				c = getch();
		}
		while(c != &#39;y&#39; &amp;amp;&amp;amp; c != &#39;n&#39;);
		if(c == &#39;y&#39;)
		{
				int x = AlphaBlendPtr(0x00FF00FF, 0xFF00FF00, 128);
				printf(&amp;quot;output: %.8X\n\n&amp;quot;, x);
		}
		free(AlphaBlendPtr);
		casm_release(casm);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**output: 7f7f7f7f **&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerPC 汇编入门与优化</title>
      <link>https://skywind3000.com/blog/archives/340/</link>
      <pubDate>Tue, 15 Apr 2008 08:05:36 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/340/</guid>
      <description>&lt;p&gt;PowerPC于1991年IBM/MOTO/APPLE研制，大量应用于服务器（AIX / AS400系列及苹果系列服务器），家用游戏机（PS3, Wii, XBOX, GameCube），以及嵌入式（仅次于Arm/x86排第三）。PowerPC核心在于开放系统软件标准，其应用范围仅次于x86，是除去x86外最值得开发者了解的体系。&lt;/p&gt;

&lt;p&gt;不需要写出非常高效的代码，但要了解基本效率原则；不需要大规模开发PPC程序，但需要时能写几段、调试时能看懂哪里错了。本文将从对比x86入手，引入RISC及PowerPC体系概念，向读者介绍该体系指令集，常用优化方法和交叉编译环境及模拟器的搭建等内容。&lt;/p&gt;

&lt;p&gt;下载阅读：&lt;a href=&#34;https://skywind3000.github.io/images/blog/wp-content/2011/04/powerpc_figure_0408.pdf&#34;&gt;powerpc_figure_0408&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;powerpc-figure-ppc入门与优化&#34;&gt;PowerPC Figure – PPC入门与优化&lt;/h2&gt;

&lt;p&gt;By Skywind（2007）&lt;br /&gt;
&lt;a href=&#34;http://www.skywind.me/blog/&#34;&gt;http://www.skywind.me/blog/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;背景介绍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PowerPC于1991年IBM/MOTO/APPLE研制，大量应用于服务器（AIX / AS400系列及苹果系列服务器），家用游戏机（PS3, Wii, XBOX, GameCube），以及嵌入式（仅次于Arm/x86排第三）。PowerPC核心在于开放系统软件标准，其应用范围仅次于x86，是除去x86外最值得开发者了解的体系。&lt;/p&gt;

&lt;p&gt;不需要写出非常高效的代码，但要了解基本效率原则；不需要大规模开发PPC程序，但需要时能写几段、调试时能看懂哪里错了。本文将从对比x86入手，引入RISC及PowerPC体系概念，向读者介绍该体系指令集，常用优化方法和交叉编译环境及模拟器的搭建等内容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>艺术化的程序设计</title>
      <link>https://skywind3000.com/blog/archives/66/</link>
      <pubDate>Tue, 21 Sep 2004 13:59:58 +0000</pubDate>
      
      <guid>https://skywind3000.com/blog/archives/66/</guid>
      <description>&lt;p&gt;计算机的硬件也有限，而人的创造也无限，程序设计美于思维和行为，记得1997年一个叫做 &amp;ldquo;OMNISCENT&amp;rdquo;的DEMO使人感慨万分，
作者就像一名艺术家在一粒小小的米粒上雕刻着自己的作品一般。能力虽有不及，仍不妨我校仿，以此挖掘计算机最原始的艺术表现形式：&lt;/p&gt;

&lt;p&gt;（此为自去年九月到现在三次发布中的最终版本: EXFORCE）&lt;/p&gt;

&lt;p&gt;在DOS窗口中运行DEBUG，然后把横线下的内容复制、粘贴到DEBUG窗口中，回车就可以见到了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>